{"version":3,"file":"error.spec.js","sourceRoot":"","sources":["../../test/error.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ErrorId } from '../src/errors/errorid'\nimport {\n    AuthorizationError,\n    ConflictError,\n    DuplicateError,\n    ExpirationError,\n    NotImplementedError,\n    NullError,\n    ValidationError\n} from '../src/index'\n\ntest('should be able to throw a validation error', () => {\n    try {\n        throw new ValidationError()\n    } catch (ex) {\n        expect(ex instanceof ValidationError).toBeTruthy()\n    }\n})\n\ntest('should be able to throw a validation error with just a message', () => {\n    try {\n        throw new ValidationError('This is an error message string.')\n    } catch (ex) {\n        expect(ex instanceof ValidationError).toBeTruthy()\n        expect(ex.message).toEqual('This is an error message string.')\n    }\n})\n\n\ntest('should be able to throw a validation error with an error id', () => {\n    const errorId = new ErrorId(\n        1000, 'test_error_name', 'This is an error message string.'\n    )\n\n    try {\n        throw new ValidationError(errorId)\n    } catch (ex) {\n        expect(ex instanceof ValidationError).toBeTruthy()\n\n        if (ex instanceof ValidationError) {\n            expect(ex.errorId).toBeDefined()\n            expect(ex.errorId.id).toEqual(errorId.id)\n            expect(ex.errorId.name).toEqual(errorId.name)\n            expect(ex.errorId.desc).toEqual(errorId.desc)\n        }\n    }\n})\n\ntest('should present valid message format for an error using ErrorId',\n    () => {\n        const errorId = new ErrorId(\n            1000, 'test_error_name', 'This is an error message string.'\n        )\n\n        try {\n            throw new ValidationError(errorId)\n        } catch (ex) {\n            expect(ex instanceof ValidationError).toBeTruthy()\n\n            if (ex instanceof ValidationError) {\n                expect(ex.errorId.message).toContain(errorId.id.toString())\n                expect(ex.errorId.message).toContain(errorId.name)\n                expect(ex.errorId.message).toContain(errorId.desc)\n\n                const errorMessage = `${errorId.id} | ${errorId.name} | \n            ${errorId.desc}`\n\n                expect(ex.errorId.message).toEqual(errorMessage)\n            }\n        }\n    })\n\ntest('should present valid message format for an error using ErrorId w/o desc',\n    () => {\n        const errorId = new ErrorId(\n            1000, 'test_error_name'\n        )\n\n        try {\n            throw new ValidationError(errorId)\n        } catch (ex) {\n            expect(ex instanceof ValidationError).toBeTruthy()\n\n            if (ex instanceof ValidationError) {\n                expect(ex.errorId).toBeDefined()\n                expect(ex.errorId.id).toEqual(errorId.id)\n                expect(ex.errorId.name).toEqual(errorId.name)\n                expect(ex.errorId.desc).toBeUndefined()\n                expect(ex.errorId.message).toContain(errorId.id.toString())\n                expect(ex.errorId.message).toContain(errorId.name)\n\n                const errorMessage = `${errorId.id} | ${errorId.name}`\n\n                expect(ex.errorId.message).toEqual(errorMessage)\n            }\n        }\n    })\n\n\ntest('should be able to throw a expiration error', () => {\n    try {\n        throw new ExpirationError()\n    } catch (ex) {\n        expect(ex instanceof ExpirationError).toBeTruthy()\n    }\n})\n\ntest('should be able to throw a conflict error', () => {\n    try {\n        throw new ConflictError()\n    } catch (ex) {\n        expect(ex instanceof ConflictError).toBeTruthy()\n    }\n})\n\ntest('should be able to throw a not implemented error', () => {\n    try {\n        throw new NotImplementedError()\n    } catch (ex) {\n        expect(ex instanceof NotImplementedError).toBeTruthy()\n    }\n})\n\ntest('should be able to throw a null error', () => {\n    try {\n        throw new NullError()\n    } catch (ex) {\n        expect(ex instanceof NullError).toBeTruthy()\n    }\n})\n\ntest('should be able to throw a authorization error', () => {\n    try {\n        throw new AuthorizationError()\n    } catch (ex) {\n        expect(ex instanceof AuthorizationError).toBeTruthy()\n    }\n})\n\ntest('should be able to throw a duplicate error', () => {\n    try {\n        throw new DuplicateError()\n    } catch (ex) {\n        expect(ex instanceof DuplicateError).toBeTruthy()\n    }\n})"]}