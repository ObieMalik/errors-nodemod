{"version":3,"file":"error.test.js","sourceRoot":"","sources":["../../test/error.test.ts"],"names":[],"mappings":";;AAAA,6CAQ0B;AAE1B,IAAI,CAAE,4CAA4C,EAAE,GAAG,EAAE;IACrD,IAAI;QACA,MAAM,IAAI,uBAAe,EAAE,CAAA;KAC9B;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,uBAAe,CAAE,CAAC,UAAU,EAAE,CAAA;KACvD;AACL,CAAC,CAAE,CAAA;AAEH,IAAI,CAAE,4CAA4C,EAAE,GAAG,EAAE;IACrD,IAAI;QACA,MAAM,IAAI,uBAAe,EAAE,CAAA;KAC9B;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,uBAAe,CAAE,CAAC,UAAU,EAAE,CAAA;KACvD;AACL,CAAC,CAAE,CAAA;AAEH,IAAI,CAAE,0CAA0C,EAAE,GAAG,EAAE;IACnD,IAAI;QACA,MAAM,IAAI,qBAAa,EAAE,CAAA;KAC5B;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,qBAAa,CAAE,CAAC,UAAU,EAAE,CAAA;KACrD;AACL,CAAC,CAAE,CAAA;AAEH,IAAI,CAAE,iDAAiD,EAAE,GAAG,EAAE;IAC1D,IAAI;QACA,MAAM,IAAI,2BAAmB,EAAE,CAAA;KAClC;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,2BAAmB,CAAE,CAAC,UAAU,EAAE,CAAA;KAC3D;AACL,CAAC,CAAE,CAAA;AAEH,IAAI,CAAE,sCAAsC,EAAE,GAAG,EAAE;IAC/C,IAAI;QACA,MAAM,IAAI,iBAAS,EAAE,CAAA;KACxB;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,iBAAS,CAAE,CAAC,UAAU,EAAE,CAAA;KACjD;AACL,CAAC,CAAE,CAAA;AAEH,IAAI,CAAE,+CAA+C,EAAE,GAAG,EAAE;IACxD,IAAI;QACA,MAAM,IAAI,0BAAkB,EAAE,CAAA;KACjC;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,0BAAkB,CAAE,CAAC,UAAU,EAAE,CAAA;KAC1D;AACL,CAAC,CAAE,CAAA;AAEH,IAAI,CAAE,2CAA2C,EAAE,GAAG,EAAE;IACpD,IAAI;QACA,MAAM,IAAI,sBAAc,EAAE,CAAA;KAC7B;IAAC,OAAQ,EAAE,EAAG;QACX,MAAM,CAAE,EAAE,YAAY,sBAAc,CAAE,CAAC,UAAU,EAAE,CAAA;KACtD;AACL,CAAC,CAAE,CAAA","sourcesContent":["import {\n    AuthorizationError,\n    ConflictError,\n    DuplicateError,\n    ExpirationError,\n    NotImplementedError,\n    NullError,\n    ValidationError\n} from '../dist/src/index'\n\ntest( 'should be able to throw a validation error', () => {\n    try {\n        throw new ValidationError()\n    } catch ( ex ) {\n        expect( ex instanceof ValidationError ).toBeTruthy()\n    }\n} )\n\ntest( 'should be able to throw a expiration error', () => {\n    try {\n        throw new ExpirationError()\n    } catch ( ex ) {\n        expect( ex instanceof ExpirationError ).toBeTruthy()\n    }\n} )\n\ntest( 'should be able to throw a conflict error', () => {\n    try {\n        throw new ConflictError()\n    } catch ( ex ) {\n        expect( ex instanceof ConflictError ).toBeTruthy()\n    }\n} )\n\ntest( 'should be able to throw a not implemented error', () => {\n    try {\n        throw new NotImplementedError()\n    } catch ( ex ) {\n        expect( ex instanceof NotImplementedError ).toBeTruthy()\n    }\n} )\n\ntest( 'should be able to throw a null error', () => {\n    try {\n        throw new NullError()\n    } catch ( ex ) {\n        expect( ex instanceof NullError ).toBeTruthy()\n    }\n} )\n\ntest( 'should be able to throw a authorization error', () => {\n    try {\n        throw new AuthorizationError()\n    } catch ( ex ) {\n        expect( ex instanceof AuthorizationError ).toBeTruthy()\n    }\n} )\n\ntest( 'should be able to throw a duplicate error', () => {\n    try {\n        throw new DuplicateError()\n    } catch ( ex ) {\n        expect( ex instanceof DuplicateError ).toBeTruthy()\n    }\n} )\n"]}