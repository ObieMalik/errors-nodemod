{"version":3,"file":"base-error.js","sourceRoot":"","sources":["../../../src/errors/base-error.ts"],"names":[],"mappings":";;;AAAA,qDAAgD;AAChD,yCAAoC;AAKpC,MAAa,SAAU,SAAQ,KAAK;IAQhC,YAAY,KAAwB;QAChC,MAAM,OAAO,GAAW,CAAC,KAAK,YAAY,kBAAO,CAAC,CAAC,CAAC;YAChD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAA;QAEzB,KAAK,CAAC,OAAO,CAAC,CAAA;QAEd,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS;YAC9B,MAAM,IAAI,8BAAa,EAAE,CAAA;QAE7B,IAAI,KAAK,YAAY,kBAAO;YACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;IAC7B,CAAC;IAKD,IAAW,OAAO;QACd,OAAO,IAAI,CAAC,QAAQ,CAAA;IACxB,CAAC;CACJ;AA3BD,8BA2BC","sourcesContent":["import { AbstractError } from './abstract-error'\nimport { ErrorId } from './error-id'\n\n/**\n * Base Error class. All custom error classes must extend from this class.\n */\nexport class BaseError extends Error {\n    private _errorId?: ErrorId\n\n    /**\n     * Error Constructor\n     * @param {string | ErrorId} error Error Message to log with the \n     * stack trace\n     */\n    constructor(error?: string | ErrorId) {\n        const message: string = (error instanceof ErrorId) ?\n            error.message : error\n\n        super(message)\n\n        if (this.constructor === BaseError)\n            throw new AbstractError()\n\n        if (error instanceof ErrorId)\n            this._errorId = error\n    }\n\n    /**\n     * Getter ErrorId\n     */\n    public get errorId(): ErrorId {\n        return this._errorId\n    }\n}"]}