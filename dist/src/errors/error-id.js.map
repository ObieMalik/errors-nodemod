{"version":3,"file":"error-id.js","sourceRoot":"","sources":["../../../src/errors/error-id.ts"],"names":[],"mappings":";;;AAIA,MAAa,OAAO;IAUhB,YACW,EAAU,EACV,IAAY,EACZ,IAAa;QAFb,OAAE,GAAF,EAAE,CAAQ;QACV,SAAI,GAAJ,IAAI,CAAQ;QACZ,SAAI,GAAJ,IAAI,CAAS;IAGxB,CAAC;IAKD,IAAW,OAAO;QACd,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI;YACtB,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAA;QAE3B,OAAO,GAAG,IAAI,CAAC,EAAE,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAA;IAC1E,CAAC;CACJ;AA5BD,0BA4BC","sourcesContent":["/**\n * ErrorId is a class to identify error using a number id, a \n * named identifier and message.\n */\nexport class ErrorId {\n    /**\n     * \n     * @param {number} id Id of the error. e.g. 1000\n     * @param {string} name Name of the error. Try to use consistent\n     *  naming scheme. e.g. user_not_found\n     * @param {string} desc Message should include specific details about \n     * this type of error. e.g.: User with provided id could not be \n     * found. Try adding a user or use a different id.\n     */\n    constructor(\n        public id: number,\n        public name: string,\n        public desc?: string\n    ) {\n\n    }\n\n    /**\n     * Get error message\n     */\n    public get message(): string {\n        const hasDesc = !this.desc ||\n            this.desc.length === 0 ||\n            this.desc.trim() === ''\n\n        return `${this.id} | ${this.name}${!hasDesc ? ' | ' + this.desc : ''}`\n    }\n}"]}